{"version":3,"sources":["services/book.js","components/Form.js","components/ListItem.js","components/List.js","App.js","index.js"],"names":["baseUrl","bookService","getBooks","axios","get","addBook","newBook","post","updateBook","id","updatedBook","put","deleteBook","delete","clearedFormData","title","author","description","Form","setSelectedBook","currentBook","setCurrentBook","books","setBooks","useState","setTitle","setAuthor","setDescription","isDisabled","setIsDisabled","useEffect","submitHandler","e","a","preventDefault","data","newBooks","console","log","updateHandler","map","b","deleteHandler","filter","className","type","name","value","onChange","target","rows","disabled","onClick","ListItem","selectedBook","book","style","backgroundColor","List","bookList","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4439a5f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst baseUrl = '/book'\r\n\r\nconst getBooks = () => {\r\n    return axios.get(baseUrl)\r\n}\r\n\r\nconst addBook = (newBook) => {\r\n    return axios.post(baseUrl, newBook)\r\n}\r\n\r\nconst updateBook = (id, updatedBook) => {\r\n    return axios.put(`${baseUrl}/${id}`, updatedBook)\r\n}\r\n\r\nconst deleteBook = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst bookService = {\r\n    getBooks,\r\n    addBook,\r\n    updateBook,\r\n    deleteBook\r\n}\r\n\r\nexport default bookService","import React, { useState, useEffect } from 'react'\r\n\r\nimport bookService from '../services/book'\r\n\r\n// Reset values for the form\r\nconst clearedFormData = {\r\n    id: null,\r\n    title: null,\r\n    author: null,\r\n    description: null,\r\n}\r\n\r\nconst Form = ({\r\n    setSelectedBook,\r\n    currentBook,\r\n    setCurrentBook,\r\n    books,\r\n    setBooks,\r\n}) => {\r\n    const [title, setTitle] = useState(currentBook.title)\r\n    const [author, setAuthor] = useState(currentBook.author)\r\n    const [description, setDescription] = useState(currentBook.description)\r\n    const [isDisabled, setIsDisabled] = useState(true)\r\n\r\n    useEffect(() => {\r\n        setTitle(currentBook.title)\r\n        setAuthor(currentBook.author)\r\n        setDescription(currentBook.description)\r\n\r\n        // Only change the buttons disabled state after a currentbook is set by user\r\n        currentBook.id ? setIsDisabled(false) : setIsDisabled(true)\r\n    }, [currentBook])\r\n\r\n    const titleInputHandler = (e) => {\r\n        setTitle(e.target.value)\r\n    }\r\n\r\n    const authorInputHandler = (e) => {\r\n        setAuthor(e.target.value)\r\n    }\r\n\r\n    const descriptionInputHandler = (e) => {\r\n        setDescription(e.target.value)\r\n    }\r\n\r\n    // Handles adding a new book when Save New button is clicked\r\n    const submitHandler = async (e) => {\r\n        e.preventDefault()\r\n\r\n        // Create new book object to be sent to the server\r\n        const newBook = {\r\n            title: title,\r\n            author: author,\r\n            description: description,\r\n        }\r\n        try {\r\n            const { data } = await bookService.addBook(newBook)\r\n            const newBooks = [...books, data]\r\n            setBooks(newBooks) // Update the book list\r\n            setCurrentBook(clearedFormData) // Reset the form inputs\r\n        } catch (error) {\r\n            console.log('Error: addBook', error)\r\n        }\r\n    }\r\n\r\n    // Handles updating a book when save button is clicked\r\n    const updateHandler = async (e) => {\r\n        e.preventDefault()\r\n\r\n        // Updated book object to be sent to the server\r\n        const updatedBook = {\r\n            ...currentBook,\r\n            title: title,\r\n            author: author,\r\n            description: description,\r\n        }\r\n        try {\r\n            await bookService.updateBook(currentBook.id, updatedBook)\r\n\r\n            // Updates the book in the book list\r\n            const newBooks = books.map((b) =>\r\n                b.id === updatedBook.id ? updatedBook : b\r\n            )\r\n\r\n            setBooks(newBooks) // Updates the book list if the update is successfull\r\n            setCurrentBook(clearedFormData) // Resets the form fields\r\n        } catch (error) {\r\n            console.log('Error: updateBook', error)\r\n        }\r\n    }\r\n\r\n    // Handles deleting a book when delete button is clicked\r\n    const deleteHandler = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            await bookService.deleteBook(currentBook.id)\r\n\r\n            const newBooks = books.filter((b) => b.id !== currentBook.id) // New books array without deleted book\r\n            setBooks(newBooks) // Updates the book list if the update is successfull\r\n        } catch (error) {\r\n            console.log('Error: deleteBook', error)\r\n        }\r\n        \r\n        setCurrentBook(clearedFormData) // Reset the form\r\n    }\r\n\r\n    const clearSelectionHandler = (e) => {\r\n        e.preventDefault()\r\n        setCurrentBook(clearedFormData) // Reset the form\r\n        setSelectedBook(null) // Reset the selected book state\r\n    }\r\n\r\n    return (\r\n        <div className=\"form\">\r\n            <h3>Book Form: </h3>\r\n            <form>\r\n                <label>Title</label>\r\n                <div>\r\n                    <input\r\n                        className=\"form-input\"\r\n                        type=\"text\"\r\n                        name=\"title\"\r\n                        value={title ? title : ''}\r\n                        onChange={titleInputHandler}\r\n                    />\r\n                </div>\r\n                <label>Author</label>\r\n                <div>\r\n                    <input\r\n                        className=\"form-input\"\r\n                        type=\"text\"\r\n                        name=\"author\"\r\n                        value={author ? author : ''}\r\n                        onChange={authorInputHandler}\r\n                    />\r\n                </div>\r\n                <label>Description</label>\r\n                <div>\r\n                    <textarea\r\n                        rows=\"3\"\r\n                        className=\"form-textarea\"\r\n                        name=\"description\"\r\n                        value={description ? description : ''}\r\n                        onChange={descriptionInputHandler}\r\n                    />\r\n                </div>\r\n                <div className=\"form-buttons\">\r\n                    <button\r\n                        className=\"button\"\r\n                        disabled={!isDisabled}\r\n                        onClick={submitHandler}\r\n                    >\r\n                        Save New\r\n                    </button>\r\n                    <button\r\n                        className=\"button\"\r\n                        disabled={isDisabled}\r\n                        onClick={updateHandler}\r\n                    >\r\n                        Save\r\n                    </button>\r\n                    <button\r\n                        className=\"button\"\r\n                        disabled={isDisabled}\r\n                        onClick={deleteHandler}\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                    <button\r\n                        className=\"button\"\r\n                        disabled={isDisabled}\r\n                        onClick={clearSelectionHandler}\r\n                    >\r\n                        Clear book selection\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\n\r\nconst ListItem = ({ selectedBook, setSelectedBook, book, setCurrentBook }) => {\r\n\r\n    // Handles clicking on a book list item\r\n    const clickHandler = () => {\r\n        setSelectedBook(book.id)\r\n        setCurrentBook(book)\r\n    }\r\n\r\n    return (\r\n        <li key={book.id}>\r\n            <div\r\n                style={\r\n                    selectedBook === book.id\r\n                        ? { backgroundColor: '#99EE99' }\r\n                        : { backgroundColor: '#C7F6B6' }\r\n                }\r\n                className=\"list-item\"\r\n                onClick={clickHandler}\r\n            >\r\n                <p>\r\n                    Title: {book.title} <br></br> Author: {book.author}\r\n                </p>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ListItem\r\n","import React from 'react'\r\n\r\nimport ListItem from './ListItem'\r\n\r\nconst List = ({ selectedBook, setSelectedBook, setCurrentBook, bookList }) => {\r\n    return (\r\n        <div className=\"list\">\r\n            <h3>Book List: </h3>\r\n            <ul>\r\n                {bookList.map((b) => (\r\n                    <ListItem\r\n                        key={b.id}\r\n                        selectedBook={selectedBook}\r\n                        setSelectedBook={setSelectedBook}\r\n                        book={b}\r\n                        setCurrentBook={setCurrentBook}\r\n                    />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","import React, { useState, useEffect } from 'react'\n\nimport Form from './components/Form'\nimport List from './components/List'\nimport bookService from './services/book'\n\nconst App = () => {\n    const [currentBook, setCurrentBook] = useState({\n        id: null,\n        title: null,\n        author: null,\n        description: null,\n    })\n    const [books, setBooks] = useState([])\n    const [selectedBook, setSelectedBook] = useState(null)\n\n    //Fetch books from the server on first render only\n    useEffect(() => {\n        const getBooks = async () => {\n            try {\n                const { data } = await bookService.getBooks()\n                setBooks(data)\n            } catch (error) {\n                console.log(error)\n            }\n        }\n        getBooks()\n    }, [])\n\n    return (\n        <div className=\"app\">\n            <Form\n                setSelectedBook={setSelectedBook}\n                currentBook={currentBook}\n                setCurrentBook={setCurrentBook}\n                books={books}\n                setBooks={setBooks}\n            />\n            <List\n                selectedBook={selectedBook}\n                setSelectedBook={setSelectedBook}\n                setCurrentBook={setCurrentBook}\n                bookList={books}\n            />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}